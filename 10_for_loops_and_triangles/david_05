#! /usr/bin/bash
#
# david_05, 2023-05-10
#
# Plot a Star of David. / Einen Davidstern plotten. 
#
# Ein Dreieck aus Sternchen auszugeben, ist ein Standard, um den
# Einsatz von zwei verschachtelten Zaehlschleifen zu demonstrieren und
# zu ueben.
#
# Da mich dies inzwischen etwas langweilt, habe ich mir eine etwas
# komplexere Aufgabe ausgedacht und wie folgt geloest.
#
# Auch in diesem Fall werden Dreiecke durch ineinander verschachtelte
# Zaehlschleifen (for loops) erstellt, durch eine Schleife in einer Schleife.
#
# Allerdings habe ich die innere Schleife in zwei Faellen in eine
# Funktion verlegt, damit die Grundstruktur des Programms leichter zu
# überschauen ist. Erkauft wird diese Uebersichtlichkeit in der
# zentralen Programmsteuerung dadurch, dass diese Funktion ein wenig
# komplex ist und der reinen Lehre zufolge zu viele Parameter hat.
#
# Erst wird ein auf der Basis stehendes Dreieck konstruiert, danach ein
# auf seiner Spitze stehendes. Diese Dreiecke werden nicht gleich
# ausgegeben, sondern Zeichen fuer Zeichen in einer 2-dimensionalen
# Matrix, einem Array gespeichert. Dadurch ist es moeglich die Zeichen
# fuer das zweite Dreieck gewissermaßen ueber oder in die Zeichen fuer
# das erste Dreieck zu schreiben. Genau dies ist die Voraussetzung, um am
# Ende eine Figur auszugeben, in der sich die beiden Dreiecke teilweise
# ueberlagern oder durchdringen.
#
# Bernd Storck, https://www.facebook.com/BStLinux/
#


### Start Values ================================

width=24
y=0
max_X=0

declare -A matrix=


### Functions ===================================

repeatChar () {
#
# Parameters: 
#
#  $1 = repetitions, how often the character should be stored.
#  $2 = row, y-index to highlight.
#  $3 = y-position
#  $4 = x-position
#  $5 = (optional) overwrites the highlight sign.
#
#  - 'X' steht fuer ein farblich hervorgehobenes Zeichen.
#  - 'x' steht fuer ein farblich nicht hervorgehobenes Zeichen.
#  - '.' steht fuer ein Auffuellzeichen, in der Ausgabe normalerweise ein Leerzeichen.
#
  local end=$1
  local highlighted_row=$2
  local row=$3
  local col=$4
  highLightChar="${5:-X}"

  for (( i=1; i<=end; i++ ))
  do
    (( col++ ))
    if (( i == 1 )) || (( i == end )) || (( y == highlighted_row )); then
      symbol="$highLightChar"
    elif [  "${matrix[$row,$col]}" = "X" ]; then
      symbol="X"
    else
      symbol='x'
    fi  
    matrix[$row,$col]="$symbol"
    (( col++ ))
    matrix[$row, $(( col + 2 )) ]='.'  # Auffuell- oder Leerzeichen
  done
  x=$col
}


### MAIN ############################################################

### 1. filling of the 2D matrix: triangle 1 =====

baseLine=$(( width / 2 - 1 ))
for (( i=2; i<=width; i=i+2, y++ ))
do

  x=$(( width - i + 1 ))  ## Der Wert von x entspricht der Anzahl leerer Matrix-Felder 
                          ## fuer den Anfang einer Zeile.

  repeatChar $(( i - 1 )) $baseLine $y $x

  [ "$x" -gt "$max_X" ] &&  max_X="$x"
done


### 2. filling of the 2D matrix: triangle 2 =====

xEnd=$max_X

y=4
baseLine=$y

for (( i=width; i>0; i=i-2, y++ ))
do
  x=$(( width - (i+1) + 2 ))

  (( lastCharPos = i - 1 ))
  repeatChar $lastCharPos $baseLine $y $x "H"
done


### Output ======================================

clear; echo -e "\n"

for (( i=0; i<=y; i++ ))
do
  for (( j=0; j<xEnd; j++ ))
  do
    case "${matrix[$i,$j]}" in
      x)   echo -en "\e[90m*\e[0m";;  # Standard plot color.
      '')  echo -n ' ';;
      X)   echo -en "\e[99m*\e[0m";;  # 1st highlight color.
      H)   echo -en "\e[92m*\e[0m";;  # 2nd highlight color.
    esac
  done
  echo
done  

echo -e "\n"

exit 0
