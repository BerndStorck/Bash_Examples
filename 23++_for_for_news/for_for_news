#! /bin/bash
#
# for_for_news 1.2.0, 2023-05-17, 2023-05-19
#
# Quick And Dirty demonstration of a practical usage of for loops.
#
# Calls by default news about Linux via the program ddgr, which gets search
# results from duckduckgo.com at the terminal, and translates the
# description text of every result from English to German.
#
# Optional the user can search for any other search string.
# 
# The search for Linux news is not a sophisticated, well targeted
# search, this program is primarily a demonstration of a for loop
# producing truly beneficial output instead of one of those a senseless
# examples you can find in countless programming instructions.
#
# Prerequisites / needed programs:
#
#  - less
#  - ddgr
#  - trans
#  - reformat
#
# Bernd Storck, https://www.facebook.com/BStLinux/
#

# Version 1.2.0: 
#
# First parameter in a call with more than three parameters will be
# masked as phrase in the search string.
#



function setForegroundColor {
  case "$1" in
    black)              fgColor='\033[0;90m';;
    red)                fgColor='\033[0;91m';;
    green)              fgColor='\033[0;92m';;
    yellow)             fgColor='\033[0;93m';;
    blue)               fgColor='\033[0;94m';;
    purple)             fgColor='\033[0;95m';;
    cyan)               fgColor='\033[0;96m';;
    white)              fgColor='\033[0;97m';;
    off|default|reset)  fgColor='\033[0m';;
  esac
  echo -en "$fgColor"
}

function printColored {
  setForegroundColor "$1"
  echo -e "${fgColor}$2\033[0m"
}


### Main ####################################

if [ "$1" = "install" ]; then   # Package name may differ from program name.

  declare -A programs=( [less]=less [ddgr]=ddgr [trans]=translate-shell [reformat]=reformat )

  for i in apt aptitude apt-get
  do
    if command -v "$i" > /dev/null; then
      installer="$i"
      break
    fi
  done
  
  if [ -z "$installer" ]; then
    echo "FEHLER: Kein geeignetes Installationsprogramm gefunden!"
    for prog in "${!programs[@]}"
    do
      if ! command -v "$prog" > /dev/null; then
        printColored "white" "Das Programm $prog wird benötigt, ist aber nicht installiert!"
      fi
    done
    exit 1
  else  
    for prog in "${!programs[@]}"
    do
      if ! command -v "$prog" > /dev/null; then
        printColored "white" "Benötigtes Programm $prog wird installiert:"
        sudo $installer -y install "${programs[$prog]}"
      fi
      echo      
    done
    exit 0
  fi
else
  for prog in ddgr trans reformat
  do
    if ! command -v "$prog" > /dev/null; then
      "$0" "install"
    fi
  done  
fi


# Set pager:
if command -v less > /dev/null; then
  pager="less -r"
else
  pager="more"
fi

# Read parameters and set defaults, if no parameter is given:
if [ -n "$1" ] && grep -Evq '^[0-9]+$' <<< "$1"; then
  last_number=4
  for parameter in "$@"
  do
    if grep -Evq '^[0-9]+$' <<< "$parameter"; then
      searched="$searched $parameter"
    fi
  done
else
  [ -n "$1" ] && last_number="$1" || last_number=4
  if [ ! "$#" -gt 2 ]; then
    [ -z "$2" ] && searched="Linux news" || searched="$2"
  else
    searched="\"$2\""
    # zwei="\"$2\""
    shift 2
    while [ -n "$1" ]
    do
      if grep -Evq '^[0-9]+$' <<< "$1"; then
        searched="$searched $1"
      fi
      shift
    done
  fi
fi  

# echo "last_number=$last_number / \$2=#$zwei# / searched=\"$searched\"" #; exit

found="$(ddgr --time=m --np -n "$last_number" -x "$searched")
"

for i in $(seq $last_number)
do
  
  if grep -q "^ $i\." <<< "$found"; then
  
    # Headline and URL:
    article="$( grep -A30 "^ $i\." <<< "$found" | grep -E -m1 -B30 '^$')"
    setForegroundColor "white"
    head -n 2 <<< "$article"
    setForegroundColor "reset"
    
    # Save and print description:
    txt="$(tail -n +3 <<< "$article")"
    reformat -l 5 -w 80 <<< "$txt"
    
    # Translate and print description:
    echo
    setForegroundColor "yellow"
    trans -brief en:de "$txt" | reformat -l 5 -w 80
    printColored "default" "-------------"
 
 else
    break

 fi
  
done | $pager

echo
exit 0
